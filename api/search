[{"id":"content:1.index.md","path":"/","dir":"","title":"Home","description":"","keywords":[],"body":"     Nuxt   Supabase   A supa simple wrapper around   supabase-js  to enable usage and integration within Nuxt.     Nuxt 3 ready  Vue 3 composables  Supabase-js V2  Usage in API server routes  Authentication support  TypeScript support  "},{"id":"content:2.get-started.md","path":"/get-started","dir":"","title":"Get Started","description":"@nuxtjs/supabase is a Nuxt module for first class integration with Supabase.","keywords":["Installation","Options","Versions","Demo"],"body":"  Getting started   @nuxtjs/supabase  is a Nuxt module for first class integration with Supabase.  Checkout the   Nuxt 3  documentation and   Supabase  to learn more.   For integrating Supabase with Nuxt 2, checkout   supabase-community/nuxt-supabase .  Installation  Add   @nuxtjs/supabase  dev dependency to your project:       yarn     add     --dev     @nuxtjs/supabase      npm     install     @nuxtjs/supabase     --save-dev  Then, add   @nuxtjs/supabase  to the   modules  section of   nuxt.config.js :      export     default     defineNuxtConfig  ({\n     modules: [  '@nuxtjs/supabase'  ],\n   })  Lastly, add   SUPABASE_URL  and   SUPABASE_KEY  to the   .env :      SUPABASE_URL  =  \"https://example.supabase.co\"\n   SUPABASE_KEY  =  \"<your_key>\"  Options  You can configure the supabase module by using the   supabase  key in   nuxt.config :      export     default     defineNuxtConfig  ({\n       // ...\n     supabase: {\n         // Options\n     }\n   }   url  Default:   process.env.SUPABASE_URL  (ex:   https://example.supabase.co )  The unique Supabase URL which is supplied when you create a new project in your project dashboard.   key  Default:   process.env.SUPABASE_KEY  Supabase 'anon key', used to bypass the Supabase API gateway and interact with your Supabase database making use of user JWT to apply RLS Policies.   serviceKey  Default:   process.env.SUPABASE_SERVICE_KEY  Supabase 'service role key', has super admin rights and can bypass your Row Level Security.   redirect  Default:   false  Supabase redirect options.    login : User will be redirected to this path if not authenticated or after logout.   callback : This is the path the user will be redirect to after supabase login redirection. Should match configured   redirectTo  option of your   signIn method .  You can disable all redirects by setting this option to false.   client  Default:   {}  Supabase client options   available here .  Versions   0.1.x  versions are wrapped around   supabase-js v1 .\n   0.2.x  versions are wrapped around   supabase-js v2 .  Demo  A live demo is made for see this module in action on   n3-supabase.netlify.app , read more in the   demo section .     Also checkout the   YouTube video  about its usage in a live demo.  .dark .ct-970614{color:#B392F0;}\n.ct-970614{color:#6F42C1;}\n.dark .ct-948368{color:#E1E4E8;}\n.ct-948368{color:#24292E;}\n.dark .ct-497092{color:#9ECBFF;}\n.ct-497092{color:#032F62;}\n.dark .ct-484930{color:#79B8FF;}\n.ct-484930{color:#005CC5;}\n.dark .ct-135336{color:#F97583;}\n.ct-135336{color:#D73A49;}\n.ct-086898{color:#6A737D;}"},{"id":"content:3.usage:composables:useSupabaseAuthClient.md","path":"/usage/composables/usesupabaseauthclient","dir":"composables","title":"useSupabaseAuthClient","description":"Handle Supabase authentification actions with useSupabaseAuthClient composable","keywords":["SignIn","SignOut"],"body":"  useSupabaseAuthClient   Auto-import  your client inside your vue files.  This composable is using   supabase-js  under the hood, it gives access to the   Supabase client  in order to handle authentification actions, all methods are available on   Supabase Auth  Documentation.   The client is initialized with the   SUPABASE_KEY  you must have in your   .env  file.   This client is dedicated to authentification purpose only. It won't be recreated if your token expires, it is used in the client plugin to listen to   onAuthStateChange  events. If you want to fetch data from the db, please use the   useSupabaseClient  instead.  SignIn  Here is an example of the login using the   signInWithOAuth  method with   third-party providers .      <  script     setup     lang  =  \"ts\"  >\n   const     user     =     useSupabaseUser  ()\n   const     client     =     useSupabaseAuthClient  ()\n   const     router     =     useRouter  ()\n   \n   // Login method using providers\n   const     login     =     async   (  provider  :     'github'     |     'google'     |     'gitlab'     |     'bitbucket'  )   =>   {\n       const   {   error   }   =     await   client.auth.  signInWithOAuth  ({ provider })\n   \n       if   (error) {\n         return     alert  (  'Something went wrong !'  )\n     }\n   \n     router.  push  (  '/dashboard'  )\n   }\n   </  script  >\n   \n   <  template  >\n     <  button     @click  =  \"login('github')\"  >Login with GitHub</  button  >\n   </  template  >   Thanks to the   Nuxt plugin , we are listening to the   onAuthStateChange  listener in order to update the user value according to the received event. We also keep the session consistency between client and server side.   Take a look at the   auth middleware  section to learn how to leverage Nuxt middleware to protect your routes for unauthenticated users.  SignOut  Check   Supabase Documentation  for further details.      <  script     setup  >\n   const     client     =     useSupabaseAuthClient  ()\n   </  script  >\n   \n   <  template  >\n     <  button     @click  =  \"client.auth.signOut()\"  >Logout</  button  >\n   </  template  >  .dark .ct-948368{color:#E1E4E8;}\n.ct-948368{color:#24292E;}\n.dark .ct-680237{color:#85E89D;}\n.ct-680237{color:#22863A;}\n.dark .ct-970614{color:#B392F0;}\n.ct-970614{color:#6F42C1;}\n.dark .ct-497092{color:#9ECBFF;}\n.ct-497092{color:#032F62;}\n.dark .ct-135336{color:#F97583;}\n.ct-135336{color:#D73A49;}\n.dark .ct-484930{color:#79B8FF;}\n.ct-484930{color:#005CC5;}\n.ct-086898{color:#6A737D;}\n.dark .ct-684589{color:#FFAB70;}\n.ct-684589{color:#E36209;}"},{"id":"content:3.usage:composables:useSupabaseClient.md","path":"/usage/composables/usesupabaseclient","dir":"composables","title":"useSupabaseClient","description":"Make requests to the Supabase API with the useSupabaseClient composable","keywords":["Database Request","Realtime","Typescript"],"body":"  useSupabaseClient   Auto-import  your client inside your vue files.  This composable is using   supabase-js  under the hood, it gives access to the   Supabase client .   The client is initialized with the   SUPABASE_KEY  you must have in your   .env  file. It establishes the connection with the database and make use of user JWT to apply   RLS Policies  implemented in Supabase. If you want to bypass policies, you can use the   serverSupabaseServiceRole .  Database Request  Please check   Supabase  documentation to fully use the power of Supabase client.  Here is an example of a fetch using the   select  method with Nuxt 3   useAsyncData  composable.      <  script     setup     lang  =  \"ts\"  >\n   const     client     =     useSupabaseClient  ()\n   \n   const   {   data  :   restaurant   }   =     await     useAsyncData  (  'restaurant'  ,   async   ()   =>   {\n       const   {   data   }   =     await   client.  from  (  'restaurants'  ).  select  (  'name, location'  ).  eq  (  'name'  ,   'My Restaurant Name'  ).  single  ()\n   \n       return   data\n   })\n   </  script  >  Realtime  Based on   Supabase Realtime , listen to changes in your PostgreSQL Database and broadcasts them over WebSockets.  To enable it, make sure you have turned on the   Realtime API  for your table.  Then, listen to changes directly in your vue page / component:      <  script     setup     lang  =  \"ts\"  >\n   import     type   { RealtimeChannel }   from     '@supabase/supabase-js'\n   \n   const     client     =     useSupabaseClient  ()\n   \n   let   realtimeChannel  :     RealtimeChannel\n   \n   // Fetch collaborators and get the refresh method provided by useAsyncData\n   const   {   data  :   collaborators  ,   refresh  :   refreshCollaborators   }   =     await     useAsyncData  (  'collaborators'  ,   async   ()   =>   {\n       const   {   data   }   =     await   client.  from  (  'collaborators'  ).  select  (  'name'  )\n       return   data\n   })\n   \n   // Once page is mounted, listen to changes on the `collaborators` table and refresh collaborators when receiving event\n   onMounted  (()   =>   {\n       // Real time listener for new workouts\n     realtimeChannel   =   client.  channel  (  'public:collaborators'  ).  on  (\n         'postgres_changes'  ,\n       { event:   '*'  , schema:   'public'  , table:   'collaborators'   },\n       ()   =>     refreshCollaborators  ()\n     )\n   \n     realtimeChannel.  subscribe  ()\n   })\n   \n       // Don't forget to unsubscribe when user left the page\n   onUnmounted  (()   =>   {\n     client.  removeChannel  (realtimeChannel)\n   })\n   </  script  >  Typescript  You can pass Database typings to the client. Check Supabase   documentation  for further information.      <  script     setup     lang  =  \"ts\"  >\n   import     type   { Database }   from     '~/types'\n   const     client     =     useSupabaseClient  <  Database  >()\n   </  script  >  .dark .ct-948368{color:#E1E4E8;}\n.ct-948368{color:#24292E;}\n.dark .ct-680237{color:#85E89D;}\n.ct-680237{color:#22863A;}\n.dark .ct-970614{color:#B392F0;}\n.ct-970614{color:#6F42C1;}\n.dark .ct-497092{color:#9ECBFF;}\n.ct-497092{color:#032F62;}\n.dark .ct-135336{color:#F97583;}\n.ct-135336{color:#D73A49;}\n.dark .ct-484930{color:#79B8FF;}\n.ct-484930{color:#005CC5;}\n.dark .ct-684589{color:#FFAB70;}\n.ct-684589{color:#E36209;}\n.ct-086898{color:#6A737D;}"},{"id":"content:3.usage:composables:useSupabaseUser.md","path":"/usage/composables/usesupabaseuser","dir":"composables","title":"useSupabaseUser","description":"Auto import and use your Supabase user with the useSupabaseUser composable","keywords":["Auth middleware"],"body":"  useSupabaseUser  Once logged in, you can   auto-import  your user everywhere inside your vue files.      <  script     setup  >\n   const     user     =     useSupabaseUser  ()\n   </  script  >  Auth middleware  You can protect your authenticated routes by creating a custom middleware in your project, here is an example:      export     default     defineNuxtRouteMiddleware  ((  to  ,   _from  )   =>   {\n       const     user     =     useSupabaseUser  ()\n   \n       if   (  !  user.value) {\n         return     navigateTo  (  '/login'  )\n     }\n   })  Then you can reference your middleware in your page with:      definePageMeta  ({\n     middleware:   'auth'\n   })  Learn more about   Nuxt middleware  and   definePageMeta .  .dark .ct-948368{color:#E1E4E8;}\n.ct-948368{color:#24292E;}\n.dark .ct-680237{color:#85E89D;}\n.ct-680237{color:#22863A;}\n.dark .ct-970614{color:#B392F0;}\n.ct-970614{color:#6F42C1;}\n.dark .ct-135336{color:#F97583;}\n.ct-135336{color:#D73A49;}\n.dark .ct-484930{color:#79B8FF;}\n.ct-484930{color:#005CC5;}\n.dark .ct-684589{color:#FFAB70;}\n.ct-684589{color:#E36209;}\n.dark .ct-497092{color:#9ECBFF;}\n.ct-497092{color:#032F62;}"},{"id":"content:3.usage:services:1.serverSupabaseClient.md","path":"/usage/services/serversupabaseclient","dir":"services","title":"serverSupabaseClient","description":"Make requests to the Supabase API on server side with the serverSupabaseClient service","keywords":[],"body":"  serverSupabaseClient   This section assumes you're familiar with   Nitro , the server engine powered by Nuxt.  This function is working similary as the   useSupabaseClient  composable but is designed to be used in   server routes .  Define your server route and just import the   serverSupabaseClient  from   #supabase/server .      import   { serverSupabaseClient }   from     '#supabase/server'\n   \n   export     default     eventHandler  (  async   (  event  )   =>   {\n       const     client     =     serverSupabaseClient  (event)\n   \n       const   {   data   }   =     await   client.  from  (  'libraries'  ).  select  ()\n   \n       return   { libraries: data }\n   })  Then call your API route from any vue file:      const     fetchLibrary     =     async   ()   =>   {\n       const   {   libraries   }   =     await     $fetch  (  '/api/libraries'  )\n   }  Be careful, if you want to call this route on SSR, please read this   section , you must send your browser cookies including your supabase token.      const   {   data  : {   libraries   }}   =     await     useFetch  (  '/api/libraries'  , {\n     headers:   useRequestHeaders  ([  'cookie'  ])\n   })  .dark .ct-135336{color:#F97583;}\n.ct-135336{color:#D73A49;}\n.dark .ct-948368{color:#E1E4E8;}\n.ct-948368{color:#24292E;}\n.dark .ct-497092{color:#9ECBFF;}\n.ct-497092{color:#032F62;}\n.dark .ct-970614{color:#B392F0;}\n.ct-970614{color:#6F42C1;}\n.dark .ct-684589{color:#FFAB70;}\n.ct-684589{color:#E36209;}\n.dark .ct-484930{color:#79B8FF;}\n.ct-484930{color:#005CC5;}"},{"id":"content:3.usage:services:2.serverSupabaseServiceRole.md","path":"/usage/services/serversupabaseservicerole","dir":"services","title":"serverSupabaseServiceRole","description":"Make requests with super admin rights to the Supabase API with the serverSupabaseServiceRole service","keywords":[],"body":"  serverSupabaseServiceRole   This section assumes you're familiar with   Nitro , the server engine powered by Nuxt.  This function is designed to work only in   server routes , there is no vue composable equivalent.  It works similary as the   serverSupabaseClient  but it provides a client with super admin rights that can bypass your   Row Level Security .   The client is initialized with the   SUPABASE_SERVICE_KEY  you must have in your   .env  file. Checkout the doc if you want to know more about   Supabase keys .  Define your server route and just import the   serverSupabaseServiceRole  from   #supabase/server .      import   { serverSupabaseServiceRole }   from     '#supabase/server'\n   \n   export     default     eventHandler  (  async   (  event  )   =>   {\n       const     client     =     serverSupabaseServiceRole  (event)\n   \n       const   {   data   }   =     await   client.  from  (  'rls-protected-table'  ).  select  ()\n   \n       return   { sensitiveData: data }\n   })  Then call your API route from any vue file:      const     fetchSensitiveData     =     async   ()   =>   {\n       const   {   sensitiveData   }   =     await     useFetch  (  '/api/bypass-rls'  )\n   }  .dark .ct-135336{color:#F97583;}\n.ct-135336{color:#D73A49;}\n.dark .ct-948368{color:#E1E4E8;}\n.ct-948368{color:#24292E;}\n.dark .ct-497092{color:#9ECBFF;}\n.ct-497092{color:#032F62;}\n.dark .ct-970614{color:#B392F0;}\n.ct-970614{color:#6F42C1;}\n.dark .ct-684589{color:#FFAB70;}\n.ct-684589{color:#E36209;}\n.dark .ct-484930{color:#79B8FF;}\n.ct-484930{color:#005CC5;}"},{"id":"content:3.usage:services:3.serverSupabaseUser.md","path":"/usage/services/serversupabaseuser","dir":"services","title":"serverSupabaseUser","description":"Get your Supabase user from serverside with the serverSupabaseUser service","keywords":[],"body":"  serverSupabaseUser   This section assumes you're familiar with   Nitro , the server engine powered by Nuxt.  This function is similar to the   useSupabaseUser  composable but is used in   server routes .  Define your server route and import the   serverSupabaseUser  from   #supabase/server .      import   { serverSupabaseUser }   from     '#supabase/server'\n   \n   export     default     defineEventHandler  (  async   (  event  )   =>   {\n       return     await     serverSupabaseUser  (event)\n   })  Then call your api route from any vue file:      const     user     =     ref  (  null  )\n   \n   const     fetchMe     =     async   ()   =>   {\n      user.value   =     await     $fetch  (  '/api/me'  )\n   }  Be careful, if you want to call this route on SSR, please read this   section , you must send your browser cookies including your supabase token.      const     user     =     ref  (  null  )\n   \n   const   {   data   }   =     await     useFetch  (  '/api/me'  , {\n     headers:   useRequestHeaders  ([  'cookie'  ])\n   })\n   \n   user.value   =   data  .dark .ct-135336{color:#F97583;}\n.ct-135336{color:#D73A49;}\n.dark .ct-948368{color:#E1E4E8;}\n.ct-948368{color:#24292E;}\n.dark .ct-497092{color:#9ECBFF;}\n.ct-497092{color:#032F62;}\n.dark .ct-970614{color:#B392F0;}\n.ct-970614{color:#6F42C1;}\n.dark .ct-684589{color:#FFAB70;}\n.ct-684589{color:#E36209;}\n.dark .ct-484930{color:#79B8FF;}\n.ct-484930{color:#005CC5;}"},{"id":"content:4.demo.md","path":"/demo","dir":"","title":"Demo","description":"Demonstration of using Supabase with Nuxt.","keywords":["Live demo","Running locally","Source code"],"body":"  Demo  Demonstration of using Supabase with Nuxt.     Live demo  You can play with the demo on   n3-supabase.netlify.app  Running locally  Follow the instruction in the   demo Readme .  Source code  The source code is available on Github in the   demo/ directory ."},{"id":"content:5.changelog.md","path":"/changelog","dir":"","title":"Changelog","description":"Discover the latest updates of the Supabase Module","keywords":[],"body":"  TODO"},{"id":"content:6.roadmap.md","path":"/roadmap","dir":"","title":"Roadmap","description":"Discover our kaban board for the next release of the Supabase module.","keywords":[],"body":" "}]